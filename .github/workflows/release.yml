name: Create Release and Build Binaries

on:
  push:
    branches:
      - main

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.create_release.outputs.tag_name }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          draft: false
          prerelease: false

  build_and_upload:
    name: Build and Upload
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        arch: [x64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Build frontend
        run: bun run build

      - name: Determine target and output name
        id: target
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            if [ "${{ matrix.arch }}" == "x64" ]; then
              echo "TARGET=bun-linux-x64" >> $GITHUB_ENV
              echo "OUTPUT_NAME=iris-server-linux-x64" >> $GITHUB_ENV
            else
              echo "TARGET=bun-linux-aarch64" >> $GITHUB_ENV
              echo "OUTPUT_NAME=iris-server-linux-arm64" >> $GITHUB_ENV
            fi
          else
            if [ "${{ matrix.arch }}" == "x64" ]; then
              echo "TARGET=bun-darwin-x64" >> $GITHUB_ENV
              echo "OUTPUT_NAME=iris-server-macos-x64" >> $GITHUB_ENV
            else
              echo "TARGET=bun-darwin-aarch64" >> $GITHUB_ENV
              echo "OUTPUT_NAME=iris-server-macos-arm64" >> $GITHUB_ENV
            fi
          fi

      - name: Compile backend
        run: |
          mkdir -p ./dist
          bun build backend/src/index.ts --compile --target=${{ env.TARGET }} --outfile=./dist/${{ env.OUTPUT_NAME }}

      - name: Upload backend binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./dist/${{ env.OUTPUT_NAME }}
          asset_name: ${{ env.OUTPUT_NAME }}
          asset_content_type: application/octet-stream

  package_and_upload_frontend:
    name: Package and Upload Frontend
    needs: create_release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Build frontend
        run: bun run build

      - name: Package frontend
        run: tar -czvf frontend.tar.gz -C backend/public .

      - name: Upload frontend artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./frontend.tar.gz
          asset_name: frontend.tar.gz
          asset_content_type: application/gzip
