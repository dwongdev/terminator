import express from 'express';
import { SocketService } from '../services/SocketService.js';

const createReplayRouter = (socketService: SocketService) => {
  const router = express.Router();

/**
 * Get session replay data
 */
router.get('/sessions/:sessionId/replay', async (req, res) => {
  try {
    const sessionId = req.params.sessionId;
    const replayData = socketService.getSessionReplayData(sessionId);
    
    if (!replayData) {
      return res.status(404).json({ 
        error: 'Session replay data not found',
        message: 'No replay events recorded for this session'
      });
    }

    res.json(replayData);
  } catch (error) {
    console.error('Error fetching replay data:', error);
    res.status(500).json({ 
      error: 'Failed to fetch replay data',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

/**
 * Export session replay as downloadable HTML file
 */
router.get('/sessions/:sessionId/export', async (req, res) => {
  try {
    const sessionId = req.params.sessionId;
    const replayData = socketService.getSessionReplayData(sessionId);
    
    if (!replayData) {
      return res.status(404).json({ 
        error: 'Session replay data not found' 
      });
    }

    // Generate HTML template for offline replay
    const html = generateReplayHTML(replayData);
    const filename = `iris-session-${sessionId}-${Date.now()}.html`;

    res.setHeader('Content-Type', 'text/html');
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    res.send(html);
  } catch (error) {
    console.error('Error exporting replay:', error);
    res.status(500).json({ 
      error: 'Failed to export replay',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

/**
 * Generate standalone HTML file with embedded replay data
 */
function generateReplayHTML(replayData: any): string {
  return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Iris Session Replay - ${replayData.sessionId}</title>
    <script src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body { margin: 0; padding: 20px; background: #0f172a; color: white; font-family: system-ui; }
        .replay-container { max-width: 1200px; margin: 0 auto; }
        .event-item { margin: 10px 0; padding: 15px; background: #1e293b; border-radius: 8px; }
        .timestamp { color: #64748b; font-size: 12px; }
        .event-type { color: #3b82f6; font-weight: bold; }
        .event-data { color: #e2e8f0; margin-top: 8px; }
        pre { background: #0f172a; padding: 10px; border-radius: 4px; overflow-x: auto; }
    </style>
</head>
<body>
    <div class="replay-container">
        <header class="mb-8">
            <h1 class="text-3xl font-bold mb-2">Iris Session Replay</h1>
            <div class="text-gray-400">
                <p>Session ID: ${replayData.sessionId}</p>
                <p>Started: ${new Date(replayData.startTime).toLocaleString()}</p>
                <p>Events: ${replayData.events.length}</p>
                <p>Messages: ${replayData.metadata.totalMessages}</p>
                <p>Tool Calls: ${replayData.metadata.totalToolCalls}</p>
            </div>
        </header>
        
        <div class="events-timeline">
            ${replayData.events.map((event: any, index: number) => `
                <div class="event-item">
                    <div class="flex justify-between items-start mb-2">
                        <span class="event-type">${event.type}</span>
                        <span class="timestamp">${new Date(event.timestamp).toLocaleTimeString()}</span>
                    </div>
                    <div class="event-data">
                        <pre><code>${JSON.stringify(event.data, null, 2)}</code></pre>
                    </div>
                </div>
            `).join('')}
        </div>
        
        <footer class="mt-8 text-center text-gray-500">
            <p>Generated by Iris - Advanced AI Agent Platform</p>
        </footer>
    </div>

    <script>
        // Embedded replay data
        window.IRIS_REPLAY_DATA = ${JSON.stringify(replayData)};
        console.log('Replay data loaded:', window.IRIS_REPLAY_DATA);
    </script>
</body>
</html>`;
}

  return router;
};

export default createReplayRouter;